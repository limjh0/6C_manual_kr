10배율에서 5배율로 전환
=====================
현재 10배율에서 촬영이 가능한데, 5배율로 전환한다고 가정하겠음

#. **제어PC** 에서 세 개의 terminal들 중, ``tiffWriter`` 를 제외한 ``PyDM`` terminal과 ``IPython`` terminal을 닫는다
#. *원격데스크탑* 으로 **수집PC** 에 접속한다 (10.10.62.115) -> ``pco IOC`` terminal을 닫는다
#. 실험허치에 들어가 **PCO1현미경** 의 ``pco.Edge카메라`` 의 전원을 끈다. **PCO2현미경** 의 ``pco.Edge카메라`` 의 전원을 켠다
#. **광학테이블** 아래에 있는 ``trigger switch`` 를 ``PCO1`` 으로 변경한다

    .. image:: images/0010_trigger_switch.png
        :align: center

#. **수집PC** 에서 ``PCO_Startup`` folder 내 ``ADPcoIOC.bat`` 를 실행한다
    #. Camera scan이 수행됨 (progress bar가 나타남)
    #. 아래의 메세지가 나오면 된 것임

        ::

            Found 5 devices on Camera

#. **제어PC** 로 전환 후 terminal들을 켠다
    #. ``RunWriter`` 가 실행되어 있는지 확인함
        + ``tiffWriter`` terminal이 켜져 있어야 함: 획득한 영상을 자동으로 **storage server** 로 transfer함
        + 만약, **storage server** ``disk 번호`` 를 변경하려면 다음과 같이 한다
            #. 현재의 세 terminal을 모두 닫는다: ``tiffWriter``, ``PyDM``, ``IPython``
            #. 평소하듯이 **storage server** ``disk 번호`` 를 변경하는데, 드라이브를 ``X:`` 로 지정해야 한다
            #. ``X: 드라이브`` 의 이름이 틀리게 나오면--즉, **storage server** ``disk 번호`` 가 제대로 표기되지 않으면-- 컴퓨터를 reboot해야 함 (괜찮을 수도 있는데, test해 보지 않았음)
    #. ``Param``
        + .txt file임
        + pixel 크기를 입력함 (이후 auto-focus 작업 때 필요함)
    #. ``RunViewer`` 를 실행함
        #. GUI form이 생김
        #. ``Image Viewer PCO`` button을 누름
        #. auto-focusing을 위해 ``Data Viewer`` button을 누름
        #. motor control을 위해 ``Stages [Manager]`` button을 누름 
            + 암호: qlafkdls 6c
    #. ``RunDAQ`` 를 실행함: script를 실행할 때 사용함
        #. Python terminal임
        #. 카메라 인식을 위해 

            .. code-block:: Python

                setup_pco()

        #. script folder로 이동하기 위해
            .. code-block:: Python

                cd ../run_scripts/
    
    #. **SG현미경** 을 정렬함        
        #. ``Image Viewer`` form에 ``Sync`` 를 check 한다: 카메라와 shutter를 동기화함

            .. image:: images/0020_Image_viewer.png
                :align: center

        #. ``Time stamp`` 를 쓰려면 ``2`` ; 쓰지 않으려면 ``0``

            .. tip::

                정렬 중에는 ``Time stamp`` 를 꺼둘 것: 영상의 histogram에 영향을 준다

        #. **SG_Stage** 의 ``X`` 값을 바꿔서 **PCO2현미경** 이 **sample stage** 뒤에 위치하게 한다
        #. **PCO2현미경** 코에 형광판을 달아서 빔 위치를 확인한다

            .. image:: images/0030_fluorescent_screen.png
                :align: center

        #. **Slit 2** 를 조정해 연다
        #. **Long movable mask** 를 조정해 연다
    #. Auto-focus 하기
        #. 초점을 맞추기 위한 target object를 **sample stage** 에 거치한다

            .. image:: images/0037_plywood.png
                :align: center

        #. ROI 지정하기 위해 ``Box`` button을 누른다

            .. image:: images/0040_box_button.png
                :align: center

        #. 빔이 상하로 움직이는 것이 영향을 주므로, 빔 밝기가 변하지 않는 지점에 ROI를 만든다
        #. auto-focus를 실행한다: 가령, step size는 7 um, 횟수 21, 노출시간 0.1초

            .. code-block:: Python

                RE(screen_align_cen(pco, focus2, 대략적인 SG_Stage Z2 값, 7, 21, time=0.1)
                RE(screen_align_cen(pco, focus2, 대략적인 SG_Stage Z2 값, step size, 횟수 (홀수여야 함), time=0.1)

        #. Graph가 그려진다. 이 때, ``Total`` 은 불필요하므로 uncheck할 것
        #. Graph가 그려지면 ``scintillation screen`` 의 tilt 제어를 자동으로 할 것인지 물어 봄. \ ``y`` 는 자동; ``n`` 은 수동

            .. warning::

                ``n`` 을 누를 것. \ 
                ``y`` 로 했을 때 제대로 모터가 동작하는지 테스트가 되지 않았음.

        #. 수동으로 tilt 제어한다. \ **Scintillator Tilt Stage** 에서 
            + ``TR`` 을 수평조정 계산값 만큼 보낸다
            + ``TB`` 를 수직조장 계산값 만큼 보낸다
        #. Scintillator tilt를 조절했으면 auto-focus를 재실행해서 제대로 보정되었는지 확인한다
        #. **SG_Stage** ``Z2`` 가 찾아진 값으로 되어 있는지도 확인한다
        #. 최종적으로, ``Enable`` button을 눌러서 ``Stats`` LED가 켜지게 한다

            .. image:: images/0050_enable_button.png
                :align: center

    #. Script를 작성한다